/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Vistas;

import Datos.CiudadDatos;
import Datos.PasajeDatos;
import Entidades.Ciudad;
import Entidades.Pasaje;
import Entidades.Transporte;
import java.awt.Graphics;
import java.awt.Image;
import javax.swing.DefaultCellEditor;
import javax.swing.ImageIcon;
import javax.swing.JComboBox;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableColumn;

/**
 *
 * @author Jeremias
 */
public class GestionPasaje extends javax.swing.JInternalFrame {
private DefaultTableModel modelo = new DefaultTableModel(){
     public boolean isCellEditable(int f, int c) {
         return c!=0&&c!= 3;
//         if(c==0||c==3){
//             return false;
//         }else{
//             return true;
//         }
        }
}; 
    /**
     * Creates new form GestionPasaje
     */
    public GestionPasaje() {
        initComponents();
        this.setSize(821,530);
        armarCabecera();
        comboCiudad();
        comboTrans();
        limpiar();
        agregarCheckBox(4,jTable1);
        agregarcomboBox(1,jTable1);
//    TableColumn tc = jTable1.getColumnModel().getColumn(4);
//    tc.setCellEditor(jTable1.getDefaultEditor(Boolean.class));//establesco la edición de celdas con un checkbox en la columna que se pasará por parámetro en el constructor.Para valores booleanos, el editor predeterminado generalmente utiliza una casilla de verificación (checkbox) que permite al usuario cambiar el valor booleano (verdadero o falso) de la celda.
//    tc.setCellRenderer(jTable1.getDefaultRenderer(Boolean.class));//permite mostrar casillas de verificación en lugar de valores booleanos en la celda. 
//    tc = jTable1.getColumnModel().getColumn(1);
//    JComboBox comboBox = new JComboBox();
//    comboBox.addItem(Transporte.TREN);
//    comboBox.addItem(Transporte.AVIÓN);
//    comboBox.addItem(Transporte.COLECTIVO);
//    tc.setCellEditor(new DefaultCellEditor(comboBox));
    } 

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        ImageIcon icon = new ImageIcon(getClass().getResource("/Imagenes/transporte.jpg"));
        Image image = icon.getImage();
        jDesktopPane1 = new javax.swing.JDesktopPane(){
            public void paintComponent(Graphics g){
                g.drawImage(image,0,0,getWidth(),getHeight(),this);
            }
        };
        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jBCrear = new javax.swing.JButton();
        jTFCiudad = new javax.swing.JTextField();
        jBModificar = new javax.swing.JButton();
        jBEliminar = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        jCBCiudad = new javax.swing.JComboBox<>();
        jLabel3 = new javax.swing.JLabel();
        jCBTrans = new javax.swing.JComboBox<>();
        jLabel4 = new javax.swing.JLabel();
        jTFImporte = new javax.swing.JTextField();
        jSeparator2 = new javax.swing.JSeparator();

        setClosable(true);
        setIconifiable(true);
        setMaximizable(true);
        setTitle("Gestión del Pasaje");

        jLabel1.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("Seleccione la ciudad de origen:");
        jLabel1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 102, 102)));
        jLabel1.setOpaque(true);

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(jTable1);

        jBCrear.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/add.png"))); // NOI18N
        jBCrear.setText("Crear");
        jBCrear.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBCrearActionPerformed(evt);
            }
        });

        jTFCiudad.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                jTFCiudadKeyReleased(evt);
            }
        });

        jBModificar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/update_file.png"))); // NOI18N
        jBModificar.setText("Modificar");
        jBModificar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBModificarActionPerformed(evt);
            }
        });

        jBEliminar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/delete2.png"))); // NOI18N
        jBEliminar.setText("Eliminar");
        jBEliminar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBEliminarActionPerformed(evt);
            }
        });

        jLabel2.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabel2.setText("Ciudad de partida:");
        jLabel2.setOpaque(true);

        jLabel3.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabel3.setText("Transporte:");
        jLabel3.setOpaque(true);

        jLabel4.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabel4.setText("Importe:");
        jLabel4.setOpaque(true);

        jSeparator2.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        jDesktopPane1.setLayer(jLabel1, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jDesktopPane1.setLayer(jScrollPane1, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jDesktopPane1.setLayer(jBCrear, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jDesktopPane1.setLayer(jTFCiudad, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jDesktopPane1.setLayer(jBModificar, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jDesktopPane1.setLayer(jBEliminar, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jDesktopPane1.setLayer(jLabel2, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jDesktopPane1.setLayer(jCBCiudad, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jDesktopPane1.setLayer(jLabel3, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jDesktopPane1.setLayer(jCBTrans, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jDesktopPane1.setLayer(jLabel4, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jDesktopPane1.setLayer(jTFImporte, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jDesktopPane1.setLayer(jSeparator2, javax.swing.JLayeredPane.DEFAULT_LAYER);

        javax.swing.GroupLayout jDesktopPane1Layout = new javax.swing.GroupLayout(jDesktopPane1);
        jDesktopPane1.setLayout(jDesktopPane1Layout);
        jDesktopPane1Layout.setHorizontalGroup(
            jDesktopPane1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jDesktopPane1Layout.createSequentialGroup()
                .addGroup(jDesktopPane1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jDesktopPane1Layout.createSequentialGroup()
                        .addGroup(jDesktopPane1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jDesktopPane1Layout.createSequentialGroup()
                                .addGap(38, 38, 38)
                                .addComponent(jBCrear))
                            .addGroup(jDesktopPane1Layout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(jLabel3))
                            .addGroup(jDesktopPane1Layout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(jLabel4)))
                        .addGap(16, 16, 16)
                        .addGroup(jDesktopPane1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jTFImporte, javax.swing.GroupLayout.PREFERRED_SIZE, 101, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jCBTrans, javax.swing.GroupLayout.PREFERRED_SIZE, 101, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(62, 62, 62))
                    .addGroup(jDesktopPane1Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jCBCiudad, javax.swing.GroupLayout.PREFERRED_SIZE, 101, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)))
                .addComponent(jSeparator2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(jDesktopPane1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jDesktopPane1Layout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addGroup(jDesktopPane1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jDesktopPane1Layout.createSequentialGroup()
                                .addComponent(jLabel1)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jTFCiudad, javax.swing.GroupLayout.PREFERRED_SIZE, 213, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 462, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(jDesktopPane1Layout.createSequentialGroup()
                        .addGap(123, 123, 123)
                        .addComponent(jBModificar)
                        .addGap(52, 52, 52)
                        .addComponent(jBEliminar)))
                .addContainerGap(13, Short.MAX_VALUE))
        );
        jDesktopPane1Layout.setVerticalGroup(
            jDesktopPane1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jDesktopPane1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jDesktopPane1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jDesktopPane1Layout.createSequentialGroup()
                        .addComponent(jSeparator2)
                        .addContainerGap())
                    .addGroup(jDesktopPane1Layout.createSequentialGroup()
                        .addGroup(jDesktopPane1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jDesktopPane1Layout.createSequentialGroup()
                                .addGroup(jDesktopPane1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel1)
                                    .addComponent(jTFCiudad, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 233, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jDesktopPane1Layout.createSequentialGroup()
                                .addGroup(jDesktopPane1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel2)
                                    .addComponent(jCBCiudad, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(26, 26, 26)
                                .addGroup(jDesktopPane1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(jDesktopPane1Layout.createSequentialGroup()
                                        .addGap(56, 56, 56)
                                        .addGroup(jDesktopPane1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                            .addComponent(jTFImporte, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(jLabel4)))
                                    .addGroup(jDesktopPane1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(jLabel3)
                                        .addComponent(jCBTrans, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addGap(28, 28, 28)
                                .addComponent(jBCrear)))
                        .addGap(41, 41, 41)
                        .addGroup(jDesktopPane1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jBModificar)
                            .addComponent(jBEliminar))
                        .addGap(52, 150, Short.MAX_VALUE))))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jDesktopPane1)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jDesktopPane1)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jTFCiudadKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTFCiudadKeyReleased
        String ciudad = this.jTFCiudad.getText();
        modelo.setRowCount(0);
        for (Pasaje pas:PasajeDatos.listaPas()) {
            if (pas.getNomCiuOrigen().getNombre().toLowerCase().startsWith(ciudad.toLowerCase())) {
                int pasaje=pas.getIdPasaje();
                Transporte trans=(Transporte)pas.getTipoTransporte();
                double precio=pas.getImporte();
                String ciu=pas.getNomCiuOrigen().getNombre();
                boolean estado=pas.isEstado();
                modelo.addRow(new Object[]{pasaje,trans,precio,ciu,estado});
                
            }
        }
    }//GEN-LAST:event_jTFCiudadKeyReleased

    private void jBCrearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBCrearActionPerformed
       try{
        if(jCBCiudad.getSelectedItem()==null||jTFImporte.getText().isEmpty()||jCBTrans.getSelectedItem()==null){
           JOptionPane.showMessageDialog(null, "No debe haber campos vacíos al momento de crear","Error", JOptionPane.ERROR_MESSAGE);
           limpiar();
           return;
       }
       Ciudad ciu=(Ciudad)jCBCiudad.getSelectedItem();
       double precio=Double.parseDouble(jTFImporte.getText());
       if(precio<0){
           JOptionPane.showMessageDialog(null, "Debe ingresar números positivos");
           limpiar();
           return;
       }
       Transporte trans=(Transporte)jCBTrans.getSelectedItem();
       Pasaje pasaje = new Pasaje(trans, precio, ciu, true);
       PasajeDatos.guardarPasaje(pasaje);
       limpiar();
      }catch(NumberFormatException ex){
                JOptionPane.showMessageDialog(null, "Debe ingresar números reales positivos");
               }
    }//GEN-LAST:event_jBCrearActionPerformed

    private void jBEliminarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBEliminarActionPerformed
       int filaSelecionada = this.jTable1.getSelectedRow();
        if (filaSelecionada != -1) { 
            int idP = Integer.parseInt(modelo.getValueAt(filaSelecionada, 0).toString());
            PasajeDatos.eliminarPasaje(idP);
            modelo.removeRow(filaSelecionada);
         
        } else {
            JOptionPane.showMessageDialog(this, "Debe seleccionar una fila para eliminar un pasaje", "Error", JOptionPane.ERROR_MESSAGE);
        }
       
        
    }//GEN-LAST:event_jBEliminarActionPerformed

    private void jBModificarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBModificarActionPerformed
        try{ 
        int filaSelecionada = this.jTable1.getSelectedRow();
         if (filaSelecionada != -1) {
             int idP = Integer.parseInt(modelo.getValueAt(filaSelecionada, 0).toString());
             Transporte trans = (Transporte) modelo.getValueAt(filaSelecionada, 1);
             double precio = Double.parseDouble(modelo.getValueAt(filaSelecionada, 2).toString());
              if(precio<0){
                   JOptionPane.showMessageDialog(null, "Debe ingresar números positivos");
                   modelo.setRowCount(0);   
                  }
             String ciudad =  modelo.getValueAt(filaSelecionada, 3).toString();
             boolean estado=(boolean) modelo.getValueAt(filaSelecionada,4);
             PasajeDatos.modificarPasaje(new Pasaje(idP, trans, precio, CiudadDatos.buscarCiudad(ciudad), estado));
         }else {
            JOptionPane.showMessageDialog(this, "Seleccione una fila antes de intentar actualizar.");
           } 
        }catch(NumberFormatException ex){
            JOptionPane.showMessageDialog(null, "Para el importe debe agregar números reales positivos");
            modelo.setRowCount(0);
        }
    }//GEN-LAST:event_jBModificarActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jBCrear;
    private javax.swing.JButton jBEliminar;
    private javax.swing.JButton jBModificar;
    private javax.swing.JComboBox<Ciudad> jCBCiudad;
    private javax.swing.JComboBox<Transporte> jCBTrans;
    private javax.swing.JDesktopPane jDesktopPane1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JTextField jTFCiudad;
    private javax.swing.JTextField jTFImporte;
    private javax.swing.JTable jTable1;
    // End of variables declaration//GEN-END:variables
private void armarCabecera(){
    modelo.addColumn("idPasaje");
    modelo.addColumn("Tipo de transporte");
    modelo.addColumn("Precio");
    modelo.addColumn("Ciudad de Origen");
    modelo.addColumn("Estado");
    jTable1.setModel(modelo);
}
private void comboCiudad(){
    for (Ciudad ciu : CiudadDatos.listarCiuxTrue()) {
                this.jCBCiudad.addItem(ciu);
        }
}

    private void comboTrans() {
        jCBTrans.addItem(Transporte.TREN);
        jCBTrans.addItem(Transporte.AVIÓN);
        jCBTrans.addItem(Transporte.COLECTIVO);
    }

    private void limpiar() {
       jTFImporte.setText(null);
       jCBCiudad.setSelectedIndex(-1);
       jCBTrans.setSelectedIndex(-1);
    }
    private void agregarCheckBox(int columna, JTable tabla){
    
    //youtube:https://www.youtube.com/watch?v=K-cJQlMUbgY
    //foro:https://es.stackoverflow.com/questions/135468/problema-con-checkbox-en-jtable-java
    //https://docs.oracle.com/javase/tutorial/uiswing/components/table.html    
    TableColumn tc = tabla.getColumnModel().getColumn(columna);
    tc.setCellEditor(tabla.getDefaultEditor(Boolean.class));//establesco la edición de celdas con un checkbox en la columna que se pasará por parámetro en el constructor.Para valores booleanos, el editor predeterminado generalmente utiliza una casilla de verificación (checkbox) que permite al usuario cambiar el valor booleano (verdadero o falso) de la celda.
    tc.setCellRenderer(tabla.getDefaultRenderer(Boolean.class));//permite mostrar casillas de verificación en lugar de valores booleanos en la celda. 
}
    private void agregarcomboBox(int columna,JTable tabla){
    TableColumn tc = tabla.getColumnModel().getColumn(columna);
    JComboBox comboBox = new JComboBox();
    comboBox.addItem(Transporte.TREN);
    comboBox.addItem(Transporte.AVIÓN);
    comboBox.addItem(Transporte.COLECTIVO);
    tc.setCellEditor(new DefaultCellEditor(comboBox));
    }
}//Fin class
